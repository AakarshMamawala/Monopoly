/* autogenerated by Processing revision 1286 on 2022-12-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;


//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;



//this will be the gameboard. it will be an array 

public class Monopoly {

    int[] gameboard = new int[39]; //each square represents a element in the array 


    public Monopoly() {
        //populate the entire array 
        gameboard[0] = "GO!"; //pass go, collect 200
        gameboard[1] = "BAusten Colgate";
        gameboard[2] = "ZCommunity Chest"; //letter Z infront represents community chest 
        gameboard[3] = "BMaster's Dorm"; 
        gameboard[4] = "Income tax"; //tbd 
        gameboard[5] = "SMorgan's Island Grill"; //railroad 
        gameboard[6] = "LAvery";
        gameboard[7] = "XChance"; //letter x represents chance card 
        gameboard[8] = "LColeman";
        gameboard[9] = "LTrask";
        gameboard[10] = "JHealth Center"; //jail healthcenter 
        gameboard[11] = "PPotter North";
        gameboard[12] = "UBuildings Services"; //utilities 
        gameboard[13] = "PPotter South";
        gameboard[14] = "PArmellino Quad";
        gameboard[15] = "STacorito"; //railroad 
        gameboard[16] = "OCaspersen Dorm";
        gameboard[17] = "ZCommunity Chest"; //community chest 
        gameboard[18] = "OMariboe Dorm";
        gameboard[19] = "OGreen Dorm";
        gameboard[20] = "free parking"; //tbd 
        gameboard[21] = "RIzzo Design Lab";
        gameboard[22] = "XChance"; //chance card 
        gameboard[23] = "RDing Music Hall";
        gameboard[24] = "RGeiger-Reeves Hall";
        gameboard[25] = "SHightstown Diner"; //railroad 
        gameboard[26] = "YHistory House";
        gameboard[27] = "YKaye Dorm";
        gameboard[28] = "UBuildings Services"; //utilities 
        gameboard[29] = "YSwig Arts Center";
        gameboard[30] = "positive for covid"; //go to health center 
        gameboard[31] = "GScience Center";
        gameboard[32] = "GChapel";
        gameboard[33] = "ZCommunith Chest"; //community chest 
        gameboard[34] = "GStudent Center";
        gameboard[35] = "SManninos"; //railroad 
        gameboard[36] = "XChance"; //chance 
        gameboard[37] = "DAthletic Center";
        gameboard[38] = "Tuition"; //income tax  
        gameboard[39] = "DAnnenberg Hall";
        //end 
    }

    public void display(PImage gameboard) {
        //display image of gameboard
    }

    public String toString() {
        for (int i = 0; i < gameboard.length(); i++) {
            println(gameboard[i]);
        }
    }
}




//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;



public class Card {
    //4 types of chance cards, 4 types of community chest 
    //chance cards: gain money, lose money, get out of jail, pass go (go to GO square)
    //community chest cards: gain money, go to a certain properties, pass go, lose a higher amount of money
    //each type of card will have a number attatched and you will get that card

    int type; 

    public Card() { //constructer 
       type = 0;
    }  
      
    public Card(int value) {
        type = value;
    }

    public int returnType() {
        return(type);
    }
}

//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;



public class Deck {
    //4 types of chance cards, 4 types of community chest 
    //chance cards: gain money, lose money, get out of jail, pass go (go to GO square)
    //community chest cards: gain money, go to a certain properties, pass go, lose a higher amount of money
    //each type of card will have a number attatched and you will get that card

   // Stack chance;
    //Stack chest;
    String whatHappened; 
    Random rand = new Random();


    public Deck() { //constructer 
        Stack deck = new Stack<Card>();

        for (int i = 0; i < 19; i++) {
            Card toAdd = new Card(i%4); //create a card with a certain type to be added
            deck.add(toAdd);
        }

        Collections.shuffle(deck); //shuffle the deck
    }

    public void chanceDefine(int type) {
        //if losing money, make it random loss between $20 - $200
        //if winning money make it random win between $20 - 200
        switch (type) {
            

            case 0: //lose money, 20-200
                int moneyLost = rand.nextInt(0,199);
                String s = String.valueOf(moneyLost);

                
            case 1: //gain money, 20-200 
                int moneyGain = rand.nextInt(0,199);
                String s = String.valueOf(moneyGain);
                return();
                

            case 2: //get out of jail free card 
                return ("Get out of jail free! Store for later or use now!" )

            case 3: //go to start, gain 200 
        }
        //swtich statement checking 
    
}

    public void chestDefine(int type) {
        //swtich statement checking 

         switch (type) {
            

            case 0: //lose money, 20-200
                int moneyLost = rand.nextInt(0,199);
                String s = String.valueOf(moneyLost);
                return ("lose money: minus " + s); //print out you lost money and the amount lost 

                
            case 1: //gain money, 20-200 ;
                int moneyGain = rand.nextInt(0,199);
                String s = String.valueOf(moneyGain);
                return ("gain money: add" + s); //print o

          //  case 2: //

            case 3: //go to start, gain 200 
        }
    }

    public int returnChanceCard() {
       return (chance.pop()); 
    }

}

//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;


public class Dice {
  
  Random random = new Random(); //new random class 
  public Dice() {
  }
  
  public int rollDice(int rolls) { //method calculating the total value of rolls. can specify number of rolls wanted 
    int total = 0; //total is 0 
    for (int i = 0; i < rolls; i++) { //for as many rolls, add the value to the total 
      int rand = random.nextInt(7); //create number between 0 and 7 
      if (rand ==0) { //if generates a 0, make it a 1 
        total +=1;
      }
      else {
        total+=rand; //add value of dice roll to total 
      }
    }
    return total; //return value of dice rolls 
  }
  
  
  
  
  
  
  
  
} 

//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;

public class Player {

    //need to add: add money method, lose money method 

    Set<String> properties = new HashSet<String>();
    Map<String,Integer> propSet = new HashMap<String,Integer>();
    Stack<String> cards = new Stack<String>();
    int money; 
    int pos;
    
    Player() {
        money = 0;
    }
    
    Player(int startingMoney) {//decide how much money each player starts with 
        money = startingMoney;
        pos = 0; 
    }

    public void addProperty(String propertyName) {
        properties.add(propertyName);
    }

    public void addMoney(int moneyAdded) {
        money += moneyAdded; //add money to player's total money 
    }

    public void loseMoney(int moneyLost) {
        money -= moneyLost; //remove money from player's total money 
    }

    public int returnMoney() {
        return money; //returns players total money 
    }

    public void changePos(int moveAmount) {
        pos += moveAmount; 
    }

    public int getPos() {
        return pos; 
    }

    


} 

//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;


//this class stores the values of each property 
public class Properties { //this class will be a map, mapping each property to a value 
  Map<String,Integer> propertyList = new HashMap();
  Map<String,Integer> colorsOwned = new HashMap(); //keeps track of number of the number of certain color properties owned 
  Set<String> boughtProperties = new HashSet<String>(); //keep track of what properties have been purchased already 

  public Properties() { //populate property list and colorsOwned 
    
    //populate propertyList map , adds many property names with their values 
    propertyList.put("BAusten Colgate", 5);
    propertyList.put("BMaster's Dorm", 6); 
    propertyList.put("LAvery", 7); //L in front represents light blue 
    propertyList.put("LColeman", 7); //L in front represents light blue 
    propertyList.put("LTrask", 7); //L in front represents light blue 
    propertyList.put("Yellow", 7); //L in front represents light blue 
  }

  public void propertPurchased(String propertyName) { //if player buys properties, add it to already bought properties 
    boughtProperties.add(propertyName); 
  }
  
  
  int getValue(String propertyName) {
    return (propertyList.get(propertyName)); 
  }
  
  
  
  String toString() {
    String output = "";
     for (Map.Entry<String, Integer> entry : propertyList.entrySet()) {
      output+=(entry.getKey() + ":" + entry.getValue());
      }
     return output;
  }
  
  
}
//Andy Wang and Aakarsh Mamawala 
import java.util.*;
import interfascia.*;

  PImage gameboard;
  Properties property = new Properties(); 
   Player player1 = new Player(500);

void setup() {
    size(1000,1000);
    background(105,124,200);
    
    gameboard = loadImage("resizedMonopoly.jpg");
    image(gameboard, 0, 0);
    
    
    println(player1.returnMoney());
    println(property.toString());
    println("space");
    println("property value of yellow is: " + property.getValue("Yellow"));
    Monopoly gameboard = new Monopoly();
    gameboard.toString();

}

void draw() {
    /*
    Dice dice = new Dice(); //create new dice class 
    rect(100,100,100,100);
    */


    startGame();
}
    
void startGame() {
    

}


//create class that checks what kind of chance/community card received, then returns output of money that should be gain or lost to player 




    
   

